"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6499],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(o,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l="Usage",s={unversionedId:"usage/usage",id:"usage/usage",title:"Usage",description:"Overview",source:"@site/docs/usage/usage.md",sourceDirName:"usage",slug:"/usage/",permalink:"/docs/usage/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"usageSidebar",previous:{title:"Installation",permalink:"/docs/usage/installation"},next:{title:"Adapter Layers",permalink:"/docs/usage/drivers/"}},o={},p=[{value:"Overview",id:"overview",level:2},{value:"Step 1. Schema setup",id:"step-1-schema-setup",level:2},{value:"Step 2. Configure benchmark parameters",id:"step-2-configure-benchmark-parameters",level:2},{value:"Executable Flags",id:"executable-flags",level:3},{value:"Experiments",id:"experiments",level:3},{value:"Step 3. Load data",id:"step-3-load-data",level:2},{value:"Step 4. Run experiments",id:"step-4-run-experiments",level:2},{value:"Step 5. Interpret results",id:"step-5-interpret-results",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The general steps for running TAOBench are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Schema setup"),": create data tables."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Configure benchmark parameters"),": pick a workload, set experiment\nparameters, and specify connection details."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Load data"),": generate a baseline social graph that subsequent requests\noperate on."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Run experiments"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Interpret results"),".")),(0,r.kt)("p",null,"The following sections describe these steps in detail."),(0,r.kt)("h2",{id:"step-1-schema-setup"},"Step 1. Schema setup"),(0,r.kt)("p",null,"For SQL databases, TAOBench uses an ",(0,r.kt)("inlineCode",{parentName:"p"},"objects")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"edges")," table to represent\nTAO's graph data model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE objects (\n    id BIGINT PRIMARY KEY,\n    timestamp BIGINT,\n    value VARCHAR(150));\nCREATE TABLE edges (\n    id1 BIGINT,\n    id2 BIGINT,\n    type BIGINT,\n    timestamp BIGINT,\n    value VARCHAR(150),\n    PRIMARY KEY CLUSTERED (id1, id2, type));\n")),(0,r.kt)("p",null,"Schemas for specific SQL dialects are in the respective docs."),(0,r.kt)("h2",{id:"step-2-configure-benchmark-parameters"},"Step 2. Configure benchmark parameters"),(0,r.kt)("p",null,"The benchmark can be configured with the following flags and constants."),(0,r.kt)("h3",{id:"executable-flags"},"Executable Flags"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"taobench")," executable takes the following flags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-load"),": Run the batch insert phase of the workload."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-run"),": Run the transactions phase of the workload."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--load-threads <n>"),": Number of threads for batch inserts (load) or batch reads (run) (default: 1)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-db <dbname>"),": Specify the name of the DB adapter layer to use (default: basic). Supported names are ",(0,r.kt)("inlineCode",{parentName:"li"},"crdb"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"mysql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"spanner"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"yugabytedb"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-p <propertyfile>"),": Load properties from the given file. Multiple files can be specified, and will be processed in the order specified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-c <configfile>"),": Load workload config from the given file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-e <experimentfile>"),": Each line gives number of threads, warmup length, and experiment length."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--property <name>=<value>"),": Specify a property to be passed to the DB and workloads multiple properties can be specified, and override any values in the propertyfile."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-s"),": Print status every 10 seconds (use status.interval prop to override)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-n"),": Number of edges in key pool (default: 165 million) to batch insert."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-spin"),": Spin on waits rather than sleeping.")),(0,r.kt)("h3",{id:"experiments"},"Experiments"),(0,r.kt)("p",null,"TAOBench supports running multiple experiments in a single run via a\nconfigurable ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.txt")," file. Each line of that file specifies a\ndifferent experiment and should be of the format:\n",(0,r.kt)("inlineCode",{parentName:"p"},"num_threads,warmup_len,exp_len"),"."),(0,r.kt)("p",null,"Specifically,"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num_threads")," specifies the number of threads concurrently making requests\nduring the experiment"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"warmup_len")," specifies the length in seconds of the warmup period, which is\nthe amount of time spent running the workload without taking measurements"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exp_len")," specifies the length in seconds of the experiment")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example ",(0,r.kt)("code",null,"experiments.txt")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2,10,150\n16,10,150\n128,10,150\n1024,10,150\n"))),(0,r.kt)("h2",{id:"step-3-load-data"},"Step 3. Load data"),(0,r.kt)("p",null,"Populate the DB tables with an initial set of edges and objects. We batch\ninsert data into the DB and batch read them into memory to be used when running\nexperiments. To run the batch insert phase, use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./taobench -threads <num_threads> -db <db> -p path/to/database_properties.properties -c path/to/config.json -load -n <num_edges>\n")),(0,r.kt)("p",null,"Ideal values for ",(0,r.kt)("inlineCode",{parentName:"p"},"num_threads")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"num_edges")," will vary by database and by\nuse-case, but 50 and 165,000,000 should be good starting points, respectively."),(0,r.kt)("p",null,"While the performance of this phase is not benchmarked, it is slow and can be\nmade faster by setting the write batch size property (",(0,r.kt)("inlineCode",{parentName:"p"},"--property\nwrite_batch_size=<size>"),"). This property sets how many rows will be inserted per\ndatabase request in this loading phase."),(0,r.kt)("h2",{id:"step-4-run-experiments"},"Step 4. Run experiments"),(0,r.kt)("p",null,"This phase runs the workload."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./taobench -threads <num_threads> -db <db> -p path/to/database_properties.properties -c path/to/config.json -run -e path/to/experiments.txt\n")),(0,r.kt)("p",null,"This command first batch reads all the keys that were inserted in the batch\ninsert phase and then begins to run experiments. Note that the batch read phase\nis only run for the ",(0,r.kt)("em",{parentName:"p"},"first experiment")," and can take several hours depending on\nthe number of keys in the DB. Here, ",(0,r.kt)("inlineCode",{parentName:"p"},"num_threads")," specifies the number of\nthreads used ",(0,r.kt)("em",{parentName:"p"},"for batch reading, not for the experiments.")," The value specified\nhere must be less than or equal to the number of shards. 50 is the default\nvalue."),(0,r.kt)("p",null,"While the performance of batch reads is not benchmarked, it is slow and can be\nmade faster by setting the read batch size property (",(0,r.kt)("inlineCode",{parentName:"p"},"--property\nread_batch_size=<size>"),"). This property sets how many rows will be read per\ndatabase request."),(0,r.kt)("h2",{id:"step-5-interpret-results"},"Step 5. Interpret results"),(0,r.kt)("p",null,"Here's a sample result of an experiment run. These statistics are printed to\nstandard output at the end of each experiment run."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Sample output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Total runtime (sec): 61.0204\nRuntime excluding warmup (sec): 50.9823\nTotal completed operations excluding warmup: 5955\nThroughput excluding warmup: 116.805\nNumber of overtime operations: 7615\nNumber of failed operations: 0\n5955 operations; [INSERT: Count=216 Max=99399.29 Min=992.38 Avg=35662.55] [READ: Count=4126 Max=96849.38 Min=256.38 Avg=12637.73] [UPDATE: Count=1190 Max=186863.46 Min=918.42 Avg=40857.72] [READTRANSACTION: Count=393 Max=5861590.29 Min=1301.79 Avg=219441.40] [WRITETRANSACTION: Count=30 Max=588020.75 Min=4498.29 Avg=150933.08] [WRITE: Count=1406 Max=186863.46 Min=918.42 Avg=40059.60]\n"))),(0,r.kt)("p",null,"A few clarifications:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For throughput, each read/write/read transaction/write transaction counts as a\nsingle completed operation."),(0,r.kt)("li",{parentName:"ul"},'The last line describes operation latencies. The "Count" is the number of\ncompleted operations. The "Max", "Min", and "Avg" are latencies in\nmicroseconds.  The ',(0,r.kt)("inlineCode",{parentName:"li"},"WRITE")," operation category is an aggregate of\ninserts/updates/deletes.")))}d.isMDXComponent=!0}}]);